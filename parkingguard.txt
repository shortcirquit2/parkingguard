/*
 * Program: Parking guard
 * Author: Fredrik Johansson
 * Created between September 24 and October 15, 2017
 * Description: Interfacing an HC-SR04 Ultrasonic sensor with
 * PIC16F690. The parking guard is lightening up three different lights
 * depending on the distance. Red < or = 15 cm, Yellow < or = 40 Green >40
 */
 
#include <xc.h>
#include <pic16f690.h>
#include <stdio.h>

// CONFIG
#pragma config FOSC = INTRCIO   // Oscillator Selection bits (INTOSCIO oscillator: I/O function on RA4/OSC2/CLKOUT pin, I/O function on RA5/OSC1/CLKIN)
#pragma config WDTE = OFF       // Watchdog Timer Enable bit (WDT disabled and can be enabled by SWDTEN bit of the WDTCON register)
#pragma config PWRTE = OFF      // Power-up Timer Enable bit (PWRT disabled)
#pragma config MCLRE = OFF      // MCLR Pin Function Select bit (MCLR pin function is digital input, MCLR internally tied to VDD)
#pragma config CP = OFF         // Code Protection bit (Program memory code protection is disabled)
#pragma config CPD = OFF        // Data Code Protection bit (Data memory code protection is disabled)
#pragma config BOREN = ON       // Brown-out Reset Selection bits (BOR enabled)
#pragma config IESO = ON        // Internal External Switchover bit (Internal External Switchover mode is enabled)
#pragma config FCMEN = ON       // Fail-Safe Clock Monitor Enabled bit (Fail-Safe Clock Monitor is enabled)

#define _XTAL_FREQ 8000000      //clock frequency 8MHz

int distance;

void interrupt echo(void)
{
    
    if(INTCONbits.RABIF == 1)           //make sure it is PORTB on change interrupt
    {
        INTCONbits.RABIE = 0;           //disable on change interrupt
        
        if(PORTBbits.RB4 == 1)          //If Echo is HIGH
        {
            TMR1ON = 1;                     //Starts the timer    
            PORTCbits.RC1 = 1;
        }
        if(PORTBbits.RB4 == 0)          //If Echo is LOW
        {
            TMR1ON = 0;                     //Stops the timer
            PORTCbits.RC1 = 0; 
        }
        /*To calculate the distance in cm. Speed of sound in air = 340 m/second
         * That is equal to 34 000 cm / second.  
         * Since the signal from the sensor have to travel in two directions 1 cm
         * would take 58,82 micro seconds (1/34 000)*2.
         * 
         * A clock frequency of 8MHz and a prescaler of 1:2 makes TMR1 increment
         * with 1 every micro second. Fosc = 1/4 which means 8MHZ/4 = 2MHz 
         * instruction frequency. If prescaler is 1:2 we would take 2MHZ/2 = 1 
         * micro second. Since TMR1 increments with 1 every instruction cycle 
         * this would mean TMR1 increments with one every micro second.
         * 
         * TMR1 thus holds the time it took for the signal in micro seconds. 
         * Since the variable to hold this value is an int we divide this with
         * 58 instead of 58.82 to get the distance in cm. The difference will 
         * be corrected later in the code. 
         */
        
        distance = TMR1 / 58;      //Calculate distance (TMR1L | (TMR1H <<8))
        
        /* This could have been written (TMR1L | (TMR1H <<8)) / 58; since
         * TMR1 consists of two registers TMR1L and TMR1H. So we shift the 
         * 8 bits of TMR1 into the int. 
         */
        
    }

    INTCONbits.RABIF = 0;              //clear PORTB on change interrupt
    INTCONbits.RABIE = 1;              //enable PORTB on change interrupt
}


void main(void) 
{
    //set up
    ANSEL = 0;                        //Disable analog input  
    ANSELH = 0;                       //Disable analog input  
    
    TRISBbits.TRISB4 = 1;             //Set RB4 as input for listening to ECHO
    TRISC = 0;                        //Set PORTC as output, Trigger pin on any PORTC pin
    PORTC = 0;                        //Set PORTC as 0
        
    //Set up Timer 1 control bits
    T1CON = 0b0001000;               //bit 7&6 can be ignored
                                     //bit 5&4: Prescaler, (01 = 1:2)
                                     //3: LP Oscillator (Off)
                                     //bit 2: Ignore since TMR1CS = 0, bit 1: Timer clock source (internal clock)
                                     //bit 0: Timer is off when this bit is 0
    //Set up interrupts
    INTCONbits.RABIF = 0;              //Clear PORTB on change interrupt
    INTCONbits.RABIE = 1;              //Enable PORTB on change interrupt
    IOCB = 0b00010000;                 //Enable PORTB on change interrupt                             
    INTCONbits.GIE = 1;                //Enables Global interrupt in INTCON register
   
    while(1)
    {
    
        TMR1L = 0;              //sets the initial value of the timer1 to 0
        TMR1H = 0;
        
        PORTCbits.RC0 = 1;          //Turn on the trigger
        __delay_us(10);         //10 micro seconds delay
        PORTCbits.RC0 = 0;          //Turn off the trigger
        
        __delay_ms(100);        //waiting for Echo
        
        distance = distance + 1;
        if (distance>2 && distance <100)
        {    
            if(distance <=15)
            {
                PORTCbits.RC6 = 1;
                PORTCbits.RC5 = 0;
                PORTCbits.RC4 = 0;
            }
            else if(distance <=40)
            {    
                PORTCbits.RC6 = 0;
                PORTCbits.RC5 = 1;
                PORTCbits.RC4 = 0;
            }
            else if (distance >40)
            {
                PORTCbits.RC6 = 0;
                PORTCbits.RC5 = 0;
                PORTCbits.RC4 = 1;
            }
            
        }
        
    }
}
